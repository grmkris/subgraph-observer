# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Access {
    canAccessAdmin: Boolean!
    customers: customersAccess
    links: linksAccess
    users: usersAccess
}

type Customer {
    createdAt: DateTime!
    id: String
    role: Customer_role!
    updatedAt: DateTime!
    wallet: String
}

type Customers {
    docs: [Customer]
    hasNextPage: Boolean
    hasPrevPage: Boolean
    limit: Int
    nextPage: Int
    offset: Int
    page: Int
    pagingCounter: Int
    prevPage: Int
    totalDocs: Int
    totalPages: Int
}

type CustomersCreateAccess {
    permission: Boolean!
    where: JSONObject
}

type CustomersCreateDocAccess {
    permission: Boolean!
    where: JSONObject
}

type CustomersDeleteAccess {
    permission: Boolean!
    where: JSONObject
}

type CustomersDeleteDocAccess {
    permission: Boolean!
    where: JSONObject
}

type CustomersDocAccessFields {
    role: CustomersDocAccessFields_role
    wallet: CustomersDocAccessFields_wallet
}

type CustomersDocAccessFields_role {
    create: CustomersDocAccessFields_role_Create
    delete: CustomersDocAccessFields_role_Delete
    read: CustomersDocAccessFields_role_Read
    update: CustomersDocAccessFields_role_Update
}

type CustomersDocAccessFields_role_Create {
    permission: Boolean!
}

type CustomersDocAccessFields_role_Delete {
    permission: Boolean!
}

type CustomersDocAccessFields_role_Read {
    permission: Boolean!
}

type CustomersDocAccessFields_role_Update {
    permission: Boolean!
}

type CustomersDocAccessFields_wallet {
    create: CustomersDocAccessFields_wallet_Create
    delete: CustomersDocAccessFields_wallet_Delete
    read: CustomersDocAccessFields_wallet_Read
    update: CustomersDocAccessFields_wallet_Update
}

type CustomersDocAccessFields_wallet_Create {
    permission: Boolean!
}

type CustomersDocAccessFields_wallet_Delete {
    permission: Boolean!
}

type CustomersDocAccessFields_wallet_Read {
    permission: Boolean!
}

type CustomersDocAccessFields_wallet_Update {
    permission: Boolean!
}

type CustomersFields {
    role: CustomersFields_role
    wallet: CustomersFields_wallet
}

type CustomersFields_role {
    create: CustomersFields_role_Create
    delete: CustomersFields_role_Delete
    read: CustomersFields_role_Read
    update: CustomersFields_role_Update
}

type CustomersFields_role_Create {
    permission: Boolean!
}

type CustomersFields_role_Delete {
    permission: Boolean!
}

type CustomersFields_role_Read {
    permission: Boolean!
}

type CustomersFields_role_Update {
    permission: Boolean!
}

type CustomersFields_wallet {
    create: CustomersFields_wallet_Create
    delete: CustomersFields_wallet_Delete
    read: CustomersFields_wallet_Read
    update: CustomersFields_wallet_Update
}

type CustomersFields_wallet_Create {
    permission: Boolean!
}

type CustomersFields_wallet_Delete {
    permission: Boolean!
}

type CustomersFields_wallet_Read {
    permission: Boolean!
}

type CustomersFields_wallet_Update {
    permission: Boolean!
}

type CustomersReadAccess {
    permission: Boolean!
    where: JSONObject
}

type CustomersReadDocAccess {
    permission: Boolean!
    where: JSONObject
}

type CustomersUpdateAccess {
    permission: Boolean!
    where: JSONObject
}

type CustomersUpdateDocAccess {
    permission: Boolean!
    where: JSONObject
}

type Link {
    address: String
    content: JSON
    createdAt: DateTime!
    customer: Customer
    id: String
    signature: String
    updatedAt: DateTime!
}

type Links {
    docs: [Link]
    hasNextPage: Boolean
    hasPrevPage: Boolean
    limit: Int
    nextPage: Int
    offset: Int
    page: Int
    pagingCounter: Int
    prevPage: Int
    totalDocs: Int
    totalPages: Int
}

type LinksCreateAccess {
    permission: Boolean!
    where: JSONObject
}

type LinksCreateDocAccess {
    permission: Boolean!
    where: JSONObject
}

type LinksDeleteAccess {
    permission: Boolean!
    where: JSONObject
}

type LinksDeleteDocAccess {
    permission: Boolean!
    where: JSONObject
}

type LinksDocAccessFields {
    address: LinksDocAccessFields_address
    content: LinksDocAccessFields_content
    customer: LinksDocAccessFields_customer
    signature: LinksDocAccessFields_signature
}

type LinksDocAccessFields_address {
    create: LinksDocAccessFields_address_Create
    delete: LinksDocAccessFields_address_Delete
    read: LinksDocAccessFields_address_Read
    update: LinksDocAccessFields_address_Update
}

type LinksDocAccessFields_address_Create {
    permission: Boolean!
}

type LinksDocAccessFields_address_Delete {
    permission: Boolean!
}

type LinksDocAccessFields_address_Read {
    permission: Boolean!
}

type LinksDocAccessFields_address_Update {
    permission: Boolean!
}

type LinksDocAccessFields_content {
    create: LinksDocAccessFields_content_Create
    delete: LinksDocAccessFields_content_Delete
    read: LinksDocAccessFields_content_Read
    update: LinksDocAccessFields_content_Update
}

type LinksDocAccessFields_content_Create {
    permission: Boolean!
}

type LinksDocAccessFields_content_Delete {
    permission: Boolean!
}

type LinksDocAccessFields_content_Read {
    permission: Boolean!
}

type LinksDocAccessFields_content_Update {
    permission: Boolean!
}

type LinksDocAccessFields_customer {
    create: LinksDocAccessFields_customer_Create
    delete: LinksDocAccessFields_customer_Delete
    read: LinksDocAccessFields_customer_Read
    update: LinksDocAccessFields_customer_Update
}

type LinksDocAccessFields_customer_Create {
    permission: Boolean!
}

type LinksDocAccessFields_customer_Delete {
    permission: Boolean!
}

type LinksDocAccessFields_customer_Read {
    permission: Boolean!
}

type LinksDocAccessFields_customer_Update {
    permission: Boolean!
}

type LinksDocAccessFields_signature {
    create: LinksDocAccessFields_signature_Create
    delete: LinksDocAccessFields_signature_Delete
    read: LinksDocAccessFields_signature_Read
    update: LinksDocAccessFields_signature_Update
}

type LinksDocAccessFields_signature_Create {
    permission: Boolean!
}

type LinksDocAccessFields_signature_Delete {
    permission: Boolean!
}

type LinksDocAccessFields_signature_Read {
    permission: Boolean!
}

type LinksDocAccessFields_signature_Update {
    permission: Boolean!
}

type LinksFields {
    address: LinksFields_address
    content: LinksFields_content
    customer: LinksFields_customer
    signature: LinksFields_signature
}

type LinksFields_address {
    create: LinksFields_address_Create
    delete: LinksFields_address_Delete
    read: LinksFields_address_Read
    update: LinksFields_address_Update
}

type LinksFields_address_Create {
    permission: Boolean!
}

type LinksFields_address_Delete {
    permission: Boolean!
}

type LinksFields_address_Read {
    permission: Boolean!
}

type LinksFields_address_Update {
    permission: Boolean!
}

type LinksFields_content {
    create: LinksFields_content_Create
    delete: LinksFields_content_Delete
    read: LinksFields_content_Read
    update: LinksFields_content_Update
}

type LinksFields_content_Create {
    permission: Boolean!
}

type LinksFields_content_Delete {
    permission: Boolean!
}

type LinksFields_content_Read {
    permission: Boolean!
}

type LinksFields_content_Update {
    permission: Boolean!
}

type LinksFields_customer {
    create: LinksFields_customer_Create
    delete: LinksFields_customer_Delete
    read: LinksFields_customer_Read
    update: LinksFields_customer_Update
}

type LinksFields_customer_Create {
    permission: Boolean!
}

type LinksFields_customer_Delete {
    permission: Boolean!
}

type LinksFields_customer_Read {
    permission: Boolean!
}

type LinksFields_customer_Update {
    permission: Boolean!
}

type LinksFields_signature {
    create: LinksFields_signature_Create
    delete: LinksFields_signature_Delete
    read: LinksFields_signature_Read
    update: LinksFields_signature_Update
}

type LinksFields_signature_Create {
    permission: Boolean!
}

type LinksFields_signature_Delete {
    permission: Boolean!
}

type LinksFields_signature_Read {
    permission: Boolean!
}

type LinksFields_signature_Update {
    permission: Boolean!
}

type LinksReadAccess {
    permission: Boolean!
    where: JSONObject
}

type LinksReadDocAccess {
    permission: Boolean!
    where: JSONObject
}

type LinksUpdateAccess {
    permission: Boolean!
    where: JSONObject
}

type LinksUpdateDocAccess {
    permission: Boolean!
    where: JSONObject
}

type Mutation {
    createCustomer(data: mutationCustomerInput!, draft: Boolean): Customer
    createLink(data: mutationLinkInput!, draft: Boolean): Link
    createUser(data: mutationUserInput!, draft: Boolean): User
    deleteCustomer(id: String!): Customer
    deleteLink(id: String!): Link
    deletePreference(key: String!): Preference
    deleteUser(id: String!): User
    forgotPasswordUser(disableEmail: Boolean, email: String!, expiration: Int): Boolean!
    loginUser(email: String, password: String): usersLoginResult
    logoutUser: String
    refreshTokenUser(token: String): usersRefreshedUser
    resetPasswordUser(password: String, token: String): usersResetPassword
    unlockUser(email: String!): Boolean!
    updateCustomer(autosave: Boolean, data: mutationCustomerUpdateInput!, draft: Boolean, id: String!): Customer
    updateLink(autosave: Boolean, data: mutationLinkUpdateInput!, draft: Boolean, id: String!): Link
    updatePreference(key: String!, value: JSON): Preference
    updateUser(autosave: Boolean, data: mutationUserUpdateInput!, draft: Boolean, id: String!): User
    verifyEmailUser(token: String): Boolean
}

type Preference {
    createdAt: DateTime!
    key: String!
    updatedAt: DateTime!
    value: JSON
}

type Query {
    Access: Access
    Customer(draft: Boolean, id: String!): Customer
    Customers(draft: Boolean, limit: Int, page: Int, sort: String, where: Customer_where): Customers
    Link(draft: Boolean, id: String!): Link
    Links(draft: Boolean, limit: Int, page: Int, sort: String, where: Link_where): Links
    Preference(key: String): Preference
    User(draft: Boolean, id: String!): User
    Users(draft: Boolean, limit: Int, page: Int, sort: String, where: User_where): Users
    docAccessCustomer(id: String!): customersDocAccess
    docAccessLink(id: String!): linksDocAccess
    docAccessUser(id: String!): usersDocAccess
    initializedUser: Boolean
    meUser: usersMe
}

type User {
    createdAt: DateTime!
    email: EmailAddress
    id: String
    lockUntil: DateTime
    loginAttempts: Float
    password: String!
    resetPasswordExpiration: DateTime
    resetPasswordToken: String
    role: User_role!
    updatedAt: DateTime!
}

type Users {
    docs: [User]
    hasNextPage: Boolean
    hasPrevPage: Boolean
    limit: Int
    nextPage: Int
    offset: Int
    page: Int
    pagingCounter: Int
    prevPage: Int
    totalDocs: Int
    totalPages: Int
}

type UsersCreateAccess {
    permission: Boolean!
    where: JSONObject
}

type UsersCreateDocAccess {
    permission: Boolean!
    where: JSONObject
}

type UsersDeleteAccess {
    permission: Boolean!
    where: JSONObject
}

type UsersDeleteDocAccess {
    permission: Boolean!
    where: JSONObject
}

type UsersDocAccessFields {
    email: UsersDocAccessFields_email
    password: UsersDocAccessFields_password
    role: UsersDocAccessFields_role
}

type UsersDocAccessFields_email {
    create: UsersDocAccessFields_email_Create
    delete: UsersDocAccessFields_email_Delete
    read: UsersDocAccessFields_email_Read
    update: UsersDocAccessFields_email_Update
}

type UsersDocAccessFields_email_Create {
    permission: Boolean!
}

type UsersDocAccessFields_email_Delete {
    permission: Boolean!
}

type UsersDocAccessFields_email_Read {
    permission: Boolean!
}

type UsersDocAccessFields_email_Update {
    permission: Boolean!
}

type UsersDocAccessFields_password {
    create: UsersDocAccessFields_password_Create
    delete: UsersDocAccessFields_password_Delete
    read: UsersDocAccessFields_password_Read
    update: UsersDocAccessFields_password_Update
}

type UsersDocAccessFields_password_Create {
    permission: Boolean!
}

type UsersDocAccessFields_password_Delete {
    permission: Boolean!
}

type UsersDocAccessFields_password_Read {
    permission: Boolean!
}

type UsersDocAccessFields_password_Update {
    permission: Boolean!
}

type UsersDocAccessFields_role {
    create: UsersDocAccessFields_role_Create
    delete: UsersDocAccessFields_role_Delete
    read: UsersDocAccessFields_role_Read
    update: UsersDocAccessFields_role_Update
}

type UsersDocAccessFields_role_Create {
    permission: Boolean!
}

type UsersDocAccessFields_role_Delete {
    permission: Boolean!
}

type UsersDocAccessFields_role_Read {
    permission: Boolean!
}

type UsersDocAccessFields_role_Update {
    permission: Boolean!
}

type UsersFields {
    email: UsersFields_email
    password: UsersFields_password
    role: UsersFields_role
}

type UsersFields_email {
    create: UsersFields_email_Create
    delete: UsersFields_email_Delete
    read: UsersFields_email_Read
    update: UsersFields_email_Update
}

type UsersFields_email_Create {
    permission: Boolean!
}

type UsersFields_email_Delete {
    permission: Boolean!
}

type UsersFields_email_Read {
    permission: Boolean!
}

type UsersFields_email_Update {
    permission: Boolean!
}

type UsersFields_password {
    create: UsersFields_password_Create
    delete: UsersFields_password_Delete
    read: UsersFields_password_Read
    update: UsersFields_password_Update
}

type UsersFields_password_Create {
    permission: Boolean!
}

type UsersFields_password_Delete {
    permission: Boolean!
}

type UsersFields_password_Read {
    permission: Boolean!
}

type UsersFields_password_Update {
    permission: Boolean!
}

type UsersFields_role {
    create: UsersFields_role_Create
    delete: UsersFields_role_Delete
    read: UsersFields_role_Read
    update: UsersFields_role_Update
}

type UsersFields_role_Create {
    permission: Boolean!
}

type UsersFields_role_Delete {
    permission: Boolean!
}

type UsersFields_role_Read {
    permission: Boolean!
}

type UsersFields_role_Update {
    permission: Boolean!
}

type UsersReadAccess {
    permission: Boolean!
    where: JSONObject
}

type UsersReadDocAccess {
    permission: Boolean!
    where: JSONObject
}

type UsersUnlockAccess {
    permission: Boolean!
    where: JSONObject
}

type UsersUnlockDocAccess {
    permission: Boolean!
    where: JSONObject
}

type UsersUpdateAccess {
    permission: Boolean!
    where: JSONObject
}

type UsersUpdateDocAccess {
    permission: Boolean!
    where: JSONObject
}

type customersAccess {
    create: CustomersCreateAccess
    delete: CustomersDeleteAccess
    fields: CustomersFields
    read: CustomersReadAccess
    update: CustomersUpdateAccess
}

type customersDocAccess {
    create: CustomersCreateDocAccess
    delete: CustomersDeleteDocAccess
    fields: CustomersDocAccessFields
    read: CustomersReadDocAccess
    update: CustomersUpdateDocAccess
}

type linksAccess {
    create: LinksCreateAccess
    delete: LinksDeleteAccess
    fields: LinksFields
    read: LinksReadAccess
    update: LinksUpdateAccess
}

type linksDocAccess {
    create: LinksCreateDocAccess
    delete: LinksDeleteDocAccess
    fields: LinksDocAccessFields
    read: LinksReadDocAccess
    update: LinksUpdateDocAccess
}

type usersAccess {
    create: UsersCreateAccess
    delete: UsersDeleteAccess
    fields: UsersFields
    read: UsersReadAccess
    unlock: UsersUnlockAccess
    update: UsersUpdateAccess
}

type usersDocAccess {
    create: UsersCreateDocAccess
    delete: UsersDeleteDocAccess
    fields: UsersDocAccessFields
    read: UsersReadDocAccess
    unlock: UsersUnlockDocAccess
    update: UsersUpdateDocAccess
}

type usersJWT {
    collection: String!
    email: EmailAddress!
}

type usersLoginResult {
    exp: Int
    token: String
    user: User
}

type usersMe {
    collection: String
    exp: Int
    token: String
    user: User
}

type usersRefreshedUser {
    exp: Int
    refreshedToken: String
    user: usersJWT
}

type usersResetPassword {
    token: String
    user: User
}

enum CustomerUpdate_role_MutationInput {
    admin
    customer
}

enum Customer_role {
    admin
    customer
}

enum Customer_role_Input {
    admin
    customer
}

enum Customer_role_MutationInput {
    admin
    customer
}

enum UserUpdate_role_MutationInput {
    admin
    customer
}

enum User_role {
    admin
    customer
}

enum User_role_Input {
    admin
    customer
}

enum User_role_MutationInput {
    admin
    customer
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/."
scalar EmailAddress

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSONObject

input Customer_createdAt_operator {
    equals: DateTime
    exists: Boolean
    greater_than: DateTime
    greater_than_equal: DateTime
    less_than: DateTime
    less_than_equal: DateTime
    like: DateTime
    not_equals: DateTime
}

input Customer_id_operator {
    all: [JSON]
    equals: JSON
    exists: Boolean
    in: [JSON]
    not_equals: JSON
    not_in: [JSON]
}

input Customer_role_operator {
    all: [Customer_role_Input]
    equals: Customer_role_Input
    in: [Customer_role_Input]
    not_equals: Customer_role_Input
    not_in: [Customer_role_Input]
}

input Customer_updatedAt_operator {
    equals: DateTime
    exists: Boolean
    greater_than: DateTime
    greater_than_equal: DateTime
    less_than: DateTime
    less_than_equal: DateTime
    like: DateTime
    not_equals: DateTime
}

input Customer_wallet_operator {
    all: [String]
    contains: String
    equals: String
    exists: Boolean
    in: [String]
    like: String
    not_equals: String
    not_in: [String]
}

input Customer_where {
    AND: [Customer_where_and]
    OR: [Customer_where_or]
    createdAt: Customer_createdAt_operator
    id: Customer_id_operator
    role: Customer_role_operator
    updatedAt: Customer_updatedAt_operator
    wallet: Customer_wallet_operator
}

input Customer_where_and {
    createdAt: Customer_createdAt_operator
    id: Customer_id_operator
    role: Customer_role_operator
    updatedAt: Customer_updatedAt_operator
    wallet: Customer_wallet_operator
}

input Customer_where_or {
    createdAt: Customer_createdAt_operator
    id: Customer_id_operator
    role: Customer_role_operator
    updatedAt: Customer_updatedAt_operator
    wallet: Customer_wallet_operator
}

input Link_address_operator {
    all: [String]
    contains: String
    equals: String
    exists: Boolean
    in: [String]
    like: String
    not_equals: String
    not_in: [String]
}

input Link_content_operator {
    contains: JSON
    equals: JSON
    exists: Boolean
    like: JSON
    not_equals: JSON
}

input Link_createdAt_operator {
    equals: DateTime
    exists: Boolean
    greater_than: DateTime
    greater_than_equal: DateTime
    less_than: DateTime
    less_than_equal: DateTime
    like: DateTime
    not_equals: DateTime
}

input Link_customer_operator {
    all: [String]
    equals: String
    exists: Boolean
    in: [String]
    not_equals: String
    not_in: [String]
}

input Link_id_operator {
    all: [JSON]
    equals: JSON
    exists: Boolean
    in: [JSON]
    not_equals: JSON
    not_in: [JSON]
}

input Link_signature_operator {
    all: [String]
    contains: String
    equals: String
    exists: Boolean
    in: [String]
    like: String
    not_equals: String
    not_in: [String]
}

input Link_updatedAt_operator {
    equals: DateTime
    exists: Boolean
    greater_than: DateTime
    greater_than_equal: DateTime
    less_than: DateTime
    less_than_equal: DateTime
    like: DateTime
    not_equals: DateTime
}

input Link_where {
    AND: [Link_where_and]
    OR: [Link_where_or]
    address: Link_address_operator
    content: Link_content_operator
    createdAt: Link_createdAt_operator
    customer: Link_customer_operator
    id: Link_id_operator
    signature: Link_signature_operator
    updatedAt: Link_updatedAt_operator
}

input Link_where_and {
    address: Link_address_operator
    content: Link_content_operator
    createdAt: Link_createdAt_operator
    customer: Link_customer_operator
    id: Link_id_operator
    signature: Link_signature_operator
    updatedAt: Link_updatedAt_operator
}

input Link_where_or {
    address: Link_address_operator
    content: Link_content_operator
    createdAt: Link_createdAt_operator
    customer: Link_customer_operator
    id: Link_id_operator
    signature: Link_signature_operator
    updatedAt: Link_updatedAt_operator
}

input User_createdAt_operator {
    equals: DateTime
    exists: Boolean
    greater_than: DateTime
    greater_than_equal: DateTime
    less_than: DateTime
    less_than_equal: DateTime
    like: DateTime
    not_equals: DateTime
}

input User_email_operator {
    all: [EmailAddress]
    contains: EmailAddress
    equals: EmailAddress
    exists: Boolean
    in: [EmailAddress]
    like: EmailAddress
    not_equals: EmailAddress
    not_in: [EmailAddress]
}

input User_id_operator {
    all: [JSON]
    equals: JSON
    exists: Boolean
    in: [JSON]
    not_equals: JSON
    not_in: [JSON]
}

input User_role_operator {
    all: [User_role_Input]
    equals: User_role_Input
    in: [User_role_Input]
    not_equals: User_role_Input
    not_in: [User_role_Input]
}

input User_updatedAt_operator {
    equals: DateTime
    exists: Boolean
    greater_than: DateTime
    greater_than_equal: DateTime
    less_than: DateTime
    less_than_equal: DateTime
    like: DateTime
    not_equals: DateTime
}

input User_where {
    AND: [User_where_and]
    OR: [User_where_or]
    createdAt: User_createdAt_operator
    email: User_email_operator
    id: User_id_operator
    role: User_role_operator
    updatedAt: User_updatedAt_operator
}

input User_where_and {
    createdAt: User_createdAt_operator
    email: User_email_operator
    id: User_id_operator
    role: User_role_operator
    updatedAt: User_updatedAt_operator
}

input User_where_or {
    createdAt: User_createdAt_operator
    email: User_email_operator
    id: User_id_operator
    role: User_role_operator
    updatedAt: User_updatedAt_operator
}

input mutationCustomerInput {
    role: Customer_role_MutationInput!
    wallet: String
}

input mutationCustomerUpdateInput {
    role: CustomerUpdate_role_MutationInput
    wallet: String
}

input mutationLinkInput {
    address: String
    content: JSON
    customer: String
    signature: String
}

input mutationLinkUpdateInput {
    address: String
    content: JSON
    customer: String
    signature: String
}

input mutationUserInput {
    email: String
    lockUntil: String
    loginAttempts: Float
    password: String!
    resetPasswordExpiration: String
    resetPasswordToken: String
    role: User_role_MutationInput!
}

input mutationUserUpdateInput {
    email: String
    lockUntil: String
    loginAttempts: Float
    password: String
    resetPasswordExpiration: String
    resetPasswordToken: String
    role: UserUpdate_role_MutationInput
}
